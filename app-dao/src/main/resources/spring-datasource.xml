<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd" default-autowire="byName">

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
      <!--  <property name="url" value="jdbc:mysql://172.16.67.2:3306/apps?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" />
        <property name="username" value="unifuser" />
        <property name="password" value="passwd" />-->

        <property name="url" value="jdbc:mysql://65.49.196.107:3306/pbody?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false" />
        <property name="username" value="root" />
        <property name="password" value="1qaz@WSX" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="10"/>
        <property name="minIdle" value="20" />
        <property name="maxActive" value="50" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="1000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接（即一个连接在池中最小生存的时间）单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"></property>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 1 FROM DUAL"></property>
        <property name="testWhileIdle" value="true"></property>
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 是否缓存preparedStatement即PSCache；
        PSCache是druid对支持游标的数据库特别定制开发的（如Oracle，DB2等），对此类数据库的性能有巨大提升。
        打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"></property>
        <property name="maxOpenPreparedStatements" value="60"></property>
    </bean>

    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.jdbcUrl}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />

        &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
        <property name="initialSize" value="${jdbc.minIdle}"/>
        <property name="minIdle" value="${jdbc.minIdle}" />
        <property name="maxActive" value="${jdbc.maxActive}" />

        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
        <property name="maxWait" value="${jdbc.maxWait}" />

        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接（即一个连接在池中最小生存的时间）单位是毫秒 &ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.betRunsMillis}"></property>

        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
        <property name="minEvictableIdleTimeMillis" value="${jdbc.connsMinExistMillis}" />

        <property name="validationQuery" value="SELECT 1 FROM DUAL"></property>
        <property name="testWhileIdle" value="true"></property>
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        &lt;!&ndash; 是否缓存preparedStatement即PSCache；
        PSCache是druid对支持游标的数据库特别定制开发的（如Oracle，DB2等），对此类数据库的性能有巨大提升。
        打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
        <property name="poolPreparedStatements" value="true"></property>
        <property name="maxOpenPreparedStatements" value="${jdbc.maxPSCache}"></property>
    </bean>-->

    <!-- 配置mybatisSqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="mapperLocations" value="classpath*:com/pbody/rest_web/dao/xml/*.xml"/>
    </bean>

    <!-- 配置SqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

    <!-- 配置mybatis mapper接口，扫描所有dao -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.pbody.rest_web.dao"/>
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
    </bean>
</beans>